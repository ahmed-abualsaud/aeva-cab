input CreateSeatsTripInput {
  name: String! @rules(apply: ["required"])
  partner_id: ID! @rules(apply: ["required"])
  driver_id: ID! @rules(apply: ["required"])
  vehicle_id: ID! @rules(apply: ["required"])
  start_date: Date! @rules(apply: ["required"])
  end_date: Date! @rules(apply: ["required"])
  days: TripDaysInput! @rules(apply: ["required"])
  price: Float! @rules(apply: ["required"])
  bookable: Boolean! @rules(apply: ["required"])
}

input CopySeatsTripInput {
  id: ID! @rules(apply: ["required"])
  name: String! @rules(apply: ["required"])
  include_stations: Boolean! @rules(apply: ["required"])
}

input UpdateSeatsTripInput {
  id: ID! @rules(apply: ["required"])
  name: String
  driver_id: ID
  vehicle_id: ID
  start_date: Date
  end_date: Date
  days: TripDaysInput
  price: Float
  bookable: Boolean
}

input CreateSeatsTripBookingInput {
  user_id: ID! @rules(apply: ["required"])
  trip_id: ID! @rules(apply: ["required"])
  trip_time: String! @rules(apply: ["required"])
  pickup_id: ID! @rules(apply: ["required"])
  pickup_time: String! @rules(apply: ["required"])
  dropoff_id: ID! @rules(apply: ["required"])
  dropoff_time: String! @rules(apply: ["required"])
  payable: Float! @rules(apply: ["required"])
  seats: Int! @rules(apply: ["required"])
  bookable: Boolean! @rules(apply: ["required"])
  promo_code_id: ID
  payment_method: String
}

input UpdateSeatsTripBookingInput {
  id: ID! @rules(apply: ["required"])
  status: String @rules(apply: ["in:CONFIRMED,CANCELLED,MISSED"])
  comment: String
  response: String
}

input CreateSeatsTripTransactionsInput {
  trip_id: ID! @rules(apply: ["required"])
  amount: Float! @rules(apply: ["required"])
  user_id: ID
  payment_method: String
  notes: String
}

type SeatsTripTransaction {
  id: ID
  trip: SeatsTrip @belongsTo
  user: User @belongsTo
  amount: Float
  payment_method: String
  notes: String
  created_at: String
}

type SeatsTripTransactionsStats {
  count: Int
  sum: Float
  avg: Float
  transactions: [TransactionGroup]
}

type TransactionGroup {
  date: String
  sum: Float
}

type SeatsTripBooking {
  id: ID
  user: User @belongsTo
  trip: SeatsTrip @belongsTo
  pickup: SeatsTripStation @belongsTo
  dropoff: SeatsTripStation @belongsTo
  promo_code: PromoCode @belongsTo
  seats: Int
  pickup_time: String
  dropoff_time: String
  payment_method: String
  payable: Float
  status: String
  comment: String
  response: String
  created_at: String
}

type SeatsNearbyStation {
  trip_id: ID
  trip_time: String
  price: Float
  bookable: Boolean
  partner_name: String
  pickup_id: ID
  pickup_name: String
  pickup_time: String
  pickup_distance: Float
  dropoff_id: ID
  dropoff_name: String
  dropoff_time: String
  dropoff_distance: Float
}

type SeatsTrip {
  id: ID
  log_id: String
  name: String
  start_date: Date
  end_date: Date
  distance: Int
  duration: Int
  startsAt: String
  date: String
  partner: Partner @belongsTo
  driver: Driver @belongsTo
  vehicle: Vehicle @belongsTo
  days: TripDays
  price: Float
  bookable: Boolean
  stations: [SeatsTripStation] @hasMany
}