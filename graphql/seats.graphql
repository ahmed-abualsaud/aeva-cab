input CreateSeatsBookingInput {
  trip_id: ID! @rules(apply: ["required"])
  trip_time: String! @rules(apply: ["required"])
  user_id: ID! @rules(apply: ["required"])
  pickup_id: ID! @rules(apply: ["required"])
  dropoff_id: ID! @rules(apply: ["required"])
  pickup_time: String! @rules(apply: ["required"])
  payable: Float! @rules(apply: ["required"])
  seats: Int! @rules(apply: ["required"])
  promo_code_id: ID
  payment_method: String
}

input UpdateSeatsBookingInput {
  id: ID! @rules(apply: ["required"])
  status: String @rules(apply: ["in:CONFIRMED,REJECTED,CANCELLED"])
  comment: String
  response: String
}

input CreateSeatsTripTransactionInput {
  trip_id: ID! @rules(apply: ["required"])
  amount: Float! @rules(apply: ["required"])
  user_id: ID
  payment_method: String
  notes: String
}

type SeatsTripTransaction {
  id: ID
  trip: BusinessTrip @belongsTo
  user: User @belongsTo
  amount: Float
  payment_method: String
  notes: String
  created_at: String
}

type SeatsTripTransactionStats {
  count: Int
  sum: Float
  avg: Float
  transactions: [TransactionGroup]
}

type TransactionGroup {
  date: String
  sum: Float
}

type SeatsBooking {
  id: ID
  user: User @belongsTo
  trip: BusinessTrip @belongsTo
  pickup: BusinessTripStation @belongsTo
  dropoff: BusinessTripStation @belongsTo
  promo_code: PromoCode @belongsTo
  seats: Int
  pickup_time: String
  payment_method: String
  payable: Float
  status: String
  comment: String
  response: String
  created_at: String
}

type SeatsNearestStation {
  trip_id: ID
  trip_time: String
  price: Float
  pickup_id: ID
  pickup_name: String
  pickup_time: String
  pickup_distance: Float
  dropoff_id: ID
  dropoff_name: String
  dropoff_time: String
  dropoff_distance: Float
}
