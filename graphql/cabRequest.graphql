type RequestStatsResponse {
  count: Int
  overallEarning: Float
  driverEarning: Float
  overallCommission: Float
  driverCommission: Float
  requests: [RequestGroup]
  requestPayments: [RequestPaymentGroup]
}

type RequestGroup {
  date: String
  count: Int
}

type RequestPaymentGroup {
  date: String
  overallEarning: Float
  overallCommission: Float
}

type CabRequest {
  id: ID
  status: String
  cancelled_by: String
  cancel_reason: String
  payment_mode: String
  paid: Boolean
  distance: Float
  created_at: DateTime
  schedule_at: DateTime
  assigned_at: DateTime
  started_at: DateTime
  finished_at: DateTime
  deleted_at: DateTime
  s_address: String
  d_address: String
  s_latitude: String
  s_longitude: String
  d_latitude: String
  d_longitude: String
  user: User @belongsTo
  driver: Driver @belongsTo
  car_type: CarType @belongsTo
  payment: CabRequestPayment @hasOne
}

type CabRequestPayment {
  id: ID
  payment_id: String
  payment_mode: String
  fixed: Float
  distance: Float
  commission: Float
  discount: Float
  tax: Float
  wallet: Float
  surge: Float
  total: Float
  payable: Float
  driver_commission: Float
  driver_pay: Float
  created_at: DateTime
}