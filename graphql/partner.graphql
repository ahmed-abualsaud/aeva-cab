input CreatePartnerInput {
  name: String! @rules(apply: ["required"])
  email: String @rules(apply: ["email", "unique:partners,email"])
  phone1: String! @rules(apply: ["required", "unique:partners,phone1"])
  phone2: String
  classification: String
  size: String
  logo: Upload
  type: String! @rules(apply: ["in:PLAYGROUND,TOSCHOOL,TOWORK,SEATS"])
  license_expires_on: String
  max_no_of_trips: Int
  paymob_id: ID
}

input UpdatePartnerInput @validator {
  id: ID
  name: String
  email: String
  classification: String
  size: String
  phone1: String
  phone2: String
  logo: Upload
  license_expires_on: String
  max_no_of_trips: Int
  paymob_id: ID
}

input PartnerDriverInput {
  partner_id: ID! @rules(apply: ["required"])
  driver_id: [ID!]! @rules(apply: ["required"])
}

input PartnerUserInput {
  partner_id: ID! @rules(apply: ["required"])
  user_id: [ID!]! @rules(apply: ["required"])
}

type PartnerAuthPayload {
  access_token: String
  partner: Partner
}

type Partner {
  id: ID
  name: String
  email: String
  classification: String
  phone1: String
  phone2: String
  logo: String
  size: String 
  license_expires_on: String
  created_at: String
  updated_at: String
  max_no_of_trips: Int
  type: String
  paymob_id: ID
  users: [User] @hasMany
  drivers: [Driver] @belongsToMany
  trips: [BusinessTrip] @hasMany
  documents: [Document] @morphMany
}