scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

input CreateUserInput {
  name: String! @rules(apply: ["required"])
  email: String! @rules(apply: ["required", "email", "unique:users,email"])
  phone: String @rules(apply: ["unique:users,phone"])
  password: String
  provider: String
  provider_id: String
  partner_id: ID
  position: String
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  partner_id: ID
  phone: String
  position: String
  avatar: String
  phone_verified_at: DateTime
}

input UserPhoneVerificationInput {
  phone: String! @rules(apply: ["required"])
}

input UserLoginInput {
  email: String! @rules(apply: ["required", "email"])
  password: String! @rules(apply: ["required"])
}

input UserSocialLoginInput {
  provider: String! @rules(apply: ["required", "in:facebook,google"])
  token: String! @rules(apply: ["required"])
}

type UploadResponse {
  id: ID!
  avatar: String!
}

type UserPayload {
  access_token: String
  user: User
}

type UserPhoneVerifyPayload {
  verificationCode: String
}

input ForgotPasswordInput {
  email: String! @rules(apply: ["required", "email"])
}

type UpdatePasswordResponse {
  status: Boolean!
  message: String 
}

input NewPasswordWithCodeInput {
  email: String! @rules(apply: ["required", "email"])
  token: String! @rules(apply: ["required", "string"])
  password: String! @rules(apply: ["required", "confirmed", "min:8"])
  password_confirmation: String!
}

input ChangePasswordInput {
  id: ID! @rules(apply: ["required"])
  current_password: String! @rules(apply: ["required"])
  new_password: String! @rules(apply: ["required", "confirmed", "min:8"])
  new_password_confirmation: String!
}

input OrderByClause {
  field: String!
  order: SortOrder!
}

enum SortOrder {
  ASC
  DESC
}

type User {
  id: ID
  name: String
  email: String
  phone: String
  avatar: String
  position: String
  phone_verified_at: DateTime
  partner: Partner @belongsTo
  is_picked_up: Boolean
}