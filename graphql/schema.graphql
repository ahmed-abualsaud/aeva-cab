scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

# Mutations that do not require Auth
type Mutation {
  # Admin Auth
  qruzMemberLogin(input: LoginInput! @spread): QruzMemberAuthPayload! 
    @field(resolver: "RoleResolver@login")

  # User Auth
  createUser(input: CreateUserInput! @spread): UserPayload!
    @field(resolver: "UserResolver@create")
  userLogin(input: LoginInput! @spread): UserPayload! 
    @field(resolver: "UserResolver@login")
  userSocialLogin(input: SocialLoginInput! @spread): UserPayload! 
    @field(resolver: "UserResolver@socialLogin")
  userPhoneVerification(input: UserPhoneVerificationInput! @spread): UserPhoneVerifyPayload!
    @field(resolver: "UserResolver@phoneVerification")
  forgotPassword(input: ForgotPasswordInput! @spread): DefaultResponse 
    @field(resolver: "ForgotPasswordResolver")
  updateForgottenPassword(input: NewPasswordWithCodeInput @spread): DefaultResponse 
    @field(resolver: "ResetPasswordResolver")

  # Driver Auth
  createDriver(input: CreateDriverInput! @spread): Driver 
    @field(resolver: "DriverResolver@create")
  driverLogin(input: LoginInput! @spread): DriverAuthPayload! 
    @field(resolver: "DriverResolver@login")

  # Partner Auth
  partnerLogin(input: LoginInput! @spread): PartnerAuthPayload! 
    @field(resolver: "PartnerResolver@login")
}

# Mutations that require Auth
extend type Mutation @guard(with: ["role", "partner", "user", "driver"]) {
  # User
  updateUser(input: UpdateUserInput! @spread): UserPayload 
    @field(resolver: "UserResolver@update") @updateUserValidation
  deleteUser(id: ID!): User @delete
  changeUserPassword(input: ChangePasswordInput @spread): DefaultResponse 
    @field(resolver: "UserResolver@updatePassword")

  # Fleet
  createFleet(input: CreateFleetInput! @spread): Fleet
    @field(resolver: "FleetResolver@create")
  updateFleet(input: UpdateFleetInput! @spread): Fleet 
    @field(resolver: "FleetResolver@update") @updateFleetValidation
  deleteFleet(id: ID!): Fleet @delete

  # Driver
  updateDriver(input: UpdateDriverInput! @spread): Driver 
    @field(resolver: "DriverResolver@update") @updateDriverValidation
  deleteDriver(id: ID!): Driver @delete
  changeDriverPassword(input: ChangePasswordInput @spread): DefaultResponse 
    @field(resolver: "DriverResolver@updatePassword")

  # Role
  createRole(input: CreateRoleInput! @spread): Role
    @field(resolver: "RoleResolver@create")
  updateRole(input: UpdateRoleInput! @spread): Role 
    @field(resolver: "RoleResolver@update") @updateRoleValidation
  changeRolePassword(input: ChangePasswordInput @spread): String 
    @field(resolver: "RoleResolver@updatePassword")
  deleteRole(id: ID!): Role @delete

  # Role Type
  createRoleType(input: CreateRoleTypeInput! @spread): RoleType @create
  updateRoleType(input: UpdateRoleTypeInput! @spread): RoleType @update @updateRoleTypeValidation
  deleteRoleType(id: ID!): RoleType @delete

  # Vehicles
  createVehicle(input: CreateVehicleInput! @spread): Vehicle 
    @field(resolver: "VehicleResolver@create")
  updateVehicle(input: UpdateVehicleInput! @spread): Vehicle 
    @field(resolver: "VehicleResolver@update") @updateVehicleValidation
  deleteVehicle(id: ID!): Vehicle @delete

  # Car Make
  createCarMake(input: CreateCarMakeInput! @spread): CarMake @create
  updateCarMake(input: UpdateCarMakeInput! @spread): CarMake @update @updateCarMakeValidation
  deleteCarMake(id: ID!): CarMake @delete

  # Car Model
  createCarModel(input: CreateCarModelInput! @spread): CarModel 
    @field(resolver: "CarModelResolver@create")
  updateCarModel(input: UpdateCarModelInput! @spread): CarModel
    @field(resolver: "CarModelResolver@update")
  deleteCarModel(id: ID!): CarModel @delete

  # Car Type
  createCarType(input: CreateCarTypeInput! @spread): CarType
    @field(resolver: "CarTypeResolver@create")
  updateCarType(input: UpdateCarTypeInput! @spread): CarType 
    @field(resolver: "CarTypeResolver@update") @updateCarTypeValidation
  deleteCarType(id: ID!): CarType @delete

  # Promo Code
  createPromoCode(input: CreatePromoCodeInput! @spread): PromoCode @create
  updatePromoCode(input: UpdatePromoCodeInput! @spread): PromoCode @update @updatePromoCodeValidation
  deletePromoCode(id: ID!): PromoCode @delete

  # Document
  uploadDocument(input: UploadDocumentInput @spread): Document
    @field(resolver: "DocumentResolver@create")
  deleteDocument(id: ID!): String
    @field(resolver: "DocumentResolver@delete")
  updateDocument(input: UpdateDocumentInput! @spread): Document @update

  # Driver Vehicle
  createDriverVehicle(input: DriverVehicleInput! @spread): DriverVehicleResponse! 
    @field(resolver: "DriverResolver@assignVehicle")
  deleteDriverVehicle(input: DriverVehicleInput! @spread): DriverVehicleResponse! 
    @field(resolver: "DriverResolver@unassignVehicle")

  # Partner
  createPartner(input: CreatePartnerInput! @spread): Partner
    @field(resolver: "PartnerResolver@create")
  updatePartner(input: UpdatePartnerInput! @spread): Partner 
    @field(resolver: "PartnerResolver@update") @updatePartnerValidation
  deletePartner(id: ID!): Partner @delete
  changePartnerPassword(input: ChangePasswordInput @spread): String 
    @field(resolver: "PartnerResolver@updatePassword")

  # Partner Driver
  createPartnerDriver(input: PartnerDriverInput! @spread): DefaultResponse
    @field(resolver: "PartnerResolver@assignDriver")
  deletePartnerDriver(input: PartnerDriverInput! @spread): DefaultResponse
    @field(resolver: "PartnerResolver@unassignDriver")

  # Trip
  createPartnerTrip(input: CreatePartnerTripInput! @spread): PartnerTrip 
    @field(resolver: "PartnerTripResolver@create")
  updatePartnerTrip(input: UpdatePartnerTripInput! @spread): PartnerTrip 
    @field(resolver: "PartnerTripResolver@update")
  deletePartnerTrip(id: ID!): PartnerTrip @delete
  restorePartnerTrip(id: ID!): PartnerTrip @restore

  # Cab Request
  deleteCabRequest(id: ID!): CabRequest @delete
  restoreCabRequest(id: ID!): CabRequest @restore

  # Ondemand Request 
  createOndemandRequest(input: CreateOndemandRequestInput! @spread): OndemandRequest 
    @field(resolver: "OndemandRequestResolver@create")
  updateOndemandRequest(input: UpdateOndemandRequestInput! @spread): OndemandRequest
    @field(resolver: "OndemandRequestResolver@update")
  deleteOndemandRequest(id: ID!): OndemandRequest @delete
  restoreOndemandRequest(id: ID!): OndemandRequest @restore

  # Trip Station
  createPartnerTripStation(input: CreatePartnerTripStationInput! @spread): PartnerTripStation @create
  createPartnerTripStations(input: CreatePartnerTripStationsInput! @spread): [PartnerTripStation] 
    @field(resolver: "PartnerTripStationResolver@create")
  updatePartnerTripStation(input: UpdatePartnerTripStationInput! @spread): PartnerTripStation 
    @field(resolver: "PartnerTripStationResolver@update")
  updateStationsRoute(input: UpdateStationsRouteInput! @spread): Boolean 
    @field(resolver: "PartnerTripStationResolver@updateRoute")
  deletePartnerTripStation(id: ID!): PartnerTripStation @delete
  restorePartnerTripStation(id: ID!): PartnerTripStation @restore
  acceptPartnerTripStation(input: AcceptPartnerTripStationInput! @spread): PartnerTripStation
    @field(resolver: "PartnerTripStationResolver@acceptStation") 

  # Station User
  createPartnerTripStationUser(input: CreatePartnerTripStationUserInput! @spread): DefaultResponse 
    @field(resolver: "PartnerTripStationResolver@assignUser") 
  deletePartnerTripStationUser(input: DeletePartnerTripStationUserInput! @spread): DefaultResponse 
    @field(resolver: "PartnerTripStationResolver@unassignUser")

  # Trip User
  createPartnerTripUser(input: CreatePartnerTripUserInput! @spread): DefaultResponse 
    @field(resolver: "PartnerTripResolver@inviteUser")
  confirmPartnerTripUser(input: ConfirmPartnerTripUserInput! @spread): PartnerTrip!
    @field(resolver: "PartnerTripResolver@subscribeUser")
  deletePartnerTripUser(input: DeletePartnerTripUserInput! @spread): DefaultResponse
    @field(resolver: "PartnerTripResolver@unsubscribeUser") 

  # Trip Log
  startTrip(input: StartTripInput! @spread): PartnerTrip 
    @field(resolver: "TripLogResolver@startTrip")
  updateDriverLocation(input: UpdateDriverLocationInput! @spread): Boolean 
    @field(resolver: "TripLogResolver@updateDriverLocation")
  nearYou(input: NearYouInput! @spread): String
    @field(resolver: "TripLogResolver@nearYou")
  userArrived(input: UserArrivedInput! @spread): String
    @field(resolver: "TripLogResolver@userArrived")
  endTrip(input: EndTripInput! @spread): String
    @field(resolver: "TripLogResolver@endTrip")
  pickUsersUp(input: PickUsersUpInput! @spread): String
    @field(resolver: "TripLogResolver@pickUsersUp")
  changeTripUserStatus(input: ChangeTripUserStatusInput! @spread): String
    @field(resolver: "TripLogResolver@changeTripUserStatus")

  # Communication
  sendMessage(input: SendMessageInput! @spread): String
    @field(resolver: "CommunicationResolver@sendMessage")
} 

# Queries that require Auth
type Query @guard(with: ["role", "partner", "user", "driver"]) {
  # User
  userLiveTrip(user_id: ID!): LiveTripResponse!
    @field(resolver: "PartnerTripResolver@userLiveTrip")
  userSubscriptions(user_id: ID!): [PartnerTrip]
    @field(resolver: "PartnerTripResolver@userSubscriptions")
  userTrips(user_id: ID!): [PartnerTrip]
    @field(resolver: "PartnerTripResolver@userTrips")
  userTripPartners(user_id: ID!): [Partner]
    @field(resolver: "PartnerTripResolver@userTripPartners")
  userTripsByPartner(user_id: ID!, partner_id: ID!): [PartnerTrip]
    @field(resolver: "PartnerTripResolver@userTripsByPartner")
  users(partner_id: ID): [User] @paginate(scopes: ["filterByPartner"])
  partnerUsers(partner_id: ID!): [User] 
    @field(resolver: "PartnerResolver@users") 
  user(id: ID @eq): User @find

  # Fleet
  fleets: [Fleet] @paginate
  fleet(id: ID @eq): Fleet @find

  # Driver
  drivers(fleet_id: ID): [Driver] @paginate(scopes: ["filterByFleet"])
  driver(id: ID @eq): Driver @find
  driverLiveTrip(driver_id: ID!): DriverLiveTripResponse!
    @field(resolver: "PartnerTripResolver@driverLiveTrip")
  driverTrips(driver_id: ID!): [PartnerTrip]
    @field(resolver: "PartnerTripResolver@driverTrips")

  # Role
  roles: [Role] @all
  role(id: ID @eq): Role @find 
  authRole: Role @auth

  # Role Type
  roleTypes: [RoleType] @all
  roleType(id: ID @eq): RoleType @find

  # Vehicles
  vehicles: [Vehicle] @paginate
  vehicle(id: ID @eq): Vehicle @find
  vehicleModelsByType(type_id: ID!): [VehicleModelsByTypeResponse!]
    @field(resolver: "VehicleResolver@vehicleModelsByType")

  # Car Make
  carMakes: [CarMake] @all
  carMake(id: ID @eq): CarMake @find

  # Car Model
  carModels: [CarModel] @all
  carModel(id: ID @eq): CarModel @find
  carMakeModels(make_id: ID @eq): [CarModel] @all

  # Car Type
  carTypes: [CarType] @all
  carType(id: ID @eq): CarType @find

  # Promo Code
  promoCodes: [PromoCode] @all
  promoCode(id: ID @eq): PromoCode @find

  # Cab Request
  cabRequests(status: String period: String): [CabRequest]
    @paginate(scopes: ["filter"]) @softDeletes
  cabRequest(id: ID! @eq): CabRequest @find
  cabRequestStatement(period: String): RequestStatement
    @field(resolver: "CabResolver@requestStatement")

  # Ondemand Request
  ondemandRequests(status: String period: String): [OndemandRequest]
    @paginate(scopes: ["filter"]) @softDeletes
  ondemandRequestsByUser(user_id: ID! @eq): [OndemandRequest] @all
  ondemandRequest(id: ID @eq): OndemandRequest @find

  # Document
  documents(documentable_id: ID!, documentable_type: String!): [Document]
    @field(resolver: "DocumentResolver")

  # Driver Vehicle
  driverVehicles(driver_id: ID! assigned: Boolean!): [Vehicle] 
    @paginate(scopes: ["assignedOrNot"])

  # Partner
  partners: [Partner] @all
  partner(id: ID @eq): Partner @find
  authPartner: Partner @auth
  partnerTrips(partner_id: ID! @eq orderBy: [OrderByClause] @orderBy): [PartnerTrip] @all @softDeletes
  partnerPredefinedStations(partner_id: ID! @eq trip_id: ID!): [PartnerTrip] @all(scopes: ["predefinedStations"])

  # Partner Driver
  partnerDrivers(partner_id: ID! assigned: Boolean!): [Driver] 
    @field(resolver: "PartnerResolver@drivers")

  # Trip
  trips: [PartnerTrip] @all
  trip(id: ID @eq): PartnerTrip  
    @field(resolver: "PartnerTripResolver@trip")

  # Trip Station
  partnerTripStations(trip_id: ID! @eq): [PartnerTripStation] @all @softDeletes

  # Station User
  partnerTripStationUsers(station_id: ID!): [User] 
    @field(resolver: "PartnerTripResolver@stationUsers")

  # Trip User
  partnerTripUsers(input: GetPartnerTripUsersInput! @spread): [PartnerTripUserWithStationResponse] 
    @field(resolver: "PartnerTripResolver@users")

  # Trip Log
  getDriverLocation(driver_id: ID!): LocationCoordinatesResponse
    @field(resolver: "TripLogResolver@driverLocation")
  getPickedUsers(log_id: String!): [User]
    @field(resolver: "TripLogResolver@pickedUsers")
  getArrivedAndPickedUsers(log_id: String!, station_id: ID!): [User]
    @field(resolver: "TripLogResolver@arrivedAndPickedUsers")
  getArrivedAndPickedUsersLite(log_id: String!, station_id: ID!): [User]
    @field(resolver: "TripLogResolver@arrivedAndPickedUsersLite")
  tripLog(log_id: String!): [TripLogResponse]
    @field(resolver: "TripLogResolver@tripLog")
  tripLogHistory(trip_id: ID! period: String): [TripLogHistoryResponse]
    @field(resolver: "TripLogResolver@tripLogHistory")
}

#import fleet.graphql 
#import driver.graphql
#import vehicle.graphql
#import driverVehicle.graphql
#import carType.graphql
#import carMake.graphql
#import carModel.graphql
#import partner.graphql
#import user.graphql
#import partnerDriver.graphql
#import partnerTrip.graphql
#import partnerTripStation.graphql
#import partnerTripUser.graphql
#import roleType.graphql
#import role.graphql
#import communication.graphql
#import tripLog.graphql
#import document.graphql
#import promoCode.graphql
#import cabRequest.graphql
#import cabRequestPayment.graphql
#import ondemandRequest.graphql