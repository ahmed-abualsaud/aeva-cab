scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

# Mutations that do not require Auth
type Mutation {
  # Admin Auth
  adminLogin(input: LoginInput! @spread): AdminAuthPayload! 
    @field(resolver: "AdminResolver@login")

  # User Auth
  createUser(input: CreateUserInput! @spread): UserPayload!
    @field(resolver: "UserResolver@create")
  userLogin(input: LoginInput! @spread): UserPayload! 
    @field(resolver: "UserResolver@login")
  userSocialLogin(input: SocialLoginInput! @spread): UserPayload! 
    @field(resolver: "UserResolver@socialLogin")
  userPhoneVerification(input: UserPhoneVerificationInput! @spread): UserPhoneVerifyPayload!
    @field(resolver: "UserResolver@phoneVerification")
  forgotPassword(input: ForgotPasswordInput! @spread): DefaultResponse 
    @field(resolver: "ForgotPasswordResolver")
  updateForgottenPassword(input: NewPasswordWithCodeInput @spread): DefaultResponse 
    @field(resolver: "ResetPasswordResolver")

  # Driver Auth
  createDriver(input: CreateDriverInput! @spread): Driver 
    @field(resolver: "DriverResolver@create")
  driverLogin(input: LoginInput! @spread): DriverAuthPayload! 
    @field(resolver: "DriverResolver@login")

  # Partner Auth
  partnerLogin(input: LoginInput! @spread): PartnerAuthPayload! 
    @field(resolver: "PartnerResolver@login")
}

# Mutations that require Auth
extend type Mutation @guard(with: ["admin", "partner", "user", "driver"]) {
  # User
  updateUser(input: UpdateUserInput! @spread): UserPayload 
    @field(resolver: "UserResolver@update") @updateUserValidation
  deleteUser(id: [ID!]!): Boolean
    @field(resolver: "UserResolver@destroy")
  changeUserPassword(input: ChangePasswordInput @spread): DefaultResponse 
    @field(resolver: "UserResolver@updatePassword")
  createMultipleUsers(input: CreateMultipleUsersInput! @spread): Boolean 
    @field(resolver: "UserResolver@createMultipleUsers")

  # Fleet
  createFleet(input: CreateFleetInput! @spread): Fleet
    @field(resolver: "FleetResolver@create")
  updateFleet(input: UpdateFleetInput! @spread): Fleet 
    @field(resolver: "FleetResolver@update") @updateFleetValidation
  deleteFleet(id: ID!): Fleet @delete

  # Driver
  updateDriver(input: UpdateDriverInput! @spread): Driver 
    @field(resolver: "DriverResolver@update") @updateDriverValidation
  deleteDriver(id: [ID!]!): Boolean
    @field(resolver: "DriverResolver@destroy")
  changeDriverPassword(input: ChangePasswordInput @spread): DefaultResponse 
    @field(resolver: "DriverResolver@updatePassword")

  # Admin
  createAdmin(input: CreateAdminInput! @spread): Admin
    @field(resolver: "AdminResolver@create")
  updateAdmin(input: UpdateAdminInput! @spread): Admin 
    @field(resolver: "AdminResolver@update") @updateAdminValidation
  changeAdminPassword(input: ChangePasswordInput @spread): String 
    @field(resolver: "AdminResolver@updatePassword")
  deleteAdmin(id: ID!): Admin @delete

  # Role Type
  createRole(input: CreateRoleInput! @spread): Role @create
  updateRole(input: UpdateRoleInput! @spread): Role @update @updateRoleValidation
  deleteRole(id: ID!): Role @delete

  # Vehicles
  createVehicle(input: CreateVehicleInput! @spread): Vehicle 
    @field(resolver: "VehicleResolver@create")
  updateVehicle(input: UpdateVehicleInput! @spread): Vehicle 
    @field(resolver: "VehicleResolver@update") @updateVehicleValidation
  deleteVehicle(id: ID!): Vehicle @delete

  # Car Make
  createCarMake(input: CreateCarMakeInput! @spread): CarMake @create
  updateCarMake(input: UpdateCarMakeInput! @spread): CarMake @update @updateCarMakeValidation
  deleteCarMake(id: ID!): CarMake @delete

  # Car Model
  createCarModel(input: CreateCarModelInput! @spread): CarModel 
    @field(resolver: "CarModelResolver@create")
  updateCarModel(input: UpdateCarModelInput! @spread): CarModel
    @field(resolver: "CarModelResolver@update")
  deleteCarModel(id: ID!): CarModel @delete

  # Car Type
  createCarType(input: CreateCarTypeInput! @spread): CarType
    @field(resolver: "CarTypeResolver@create")
  updateCarType(input: UpdateCarTypeInput! @spread): CarType 
    @field(resolver: "CarTypeResolver@update") @updateCarTypeValidation
  deleteCarType(id: ID!): CarType @delete

  # Promo Code
  createPromoCode(input: CreatePromoCodeInput! @spread): PromoCode @create
  updatePromoCode(input: UpdatePromoCodeInput! @spread): PromoCode @update @updatePromoCodeValidation
  deletePromoCode(id: ID!): PromoCode @delete

  # Document
  uploadDocument(input: UploadDocumentInput @spread): Document
    @field(resolver: "DocumentResolver@create")
  deleteDocument(id: ID!): String
    @field(resolver: "DocumentResolver@delete")
  updateDocument(input: UpdateDocumentInput! @spread): Document @update

  # Driver Vehicle
  createDriverVehicle(input: DriverVehicleInput! @spread): DefaultResponse! 
    @field(resolver: "DriverResolver@assignVehicle")
  deleteDriverVehicle(input: DriverVehicleInput! @spread): DefaultResponse! 
    @field(resolver: "DriverResolver@unassignVehicle")

  # Partner
  createPartner(input: CreatePartnerInput! @spread): Partner
    @field(resolver: "PartnerResolver@create")
  updatePartner(input: UpdatePartnerInput! @spread): Partner 
    @field(resolver: "PartnerResolver@update") @updatePartnerValidation
  deletePartner(id: ID!): Partner @delete
  changePartnerPassword(input: ChangePasswordInput @spread): String 
    @field(resolver: "PartnerResolver@updatePassword")

  # Partner User
  createPartnerUser(input: PartnerUserInput! @spread): DefaultResponse
    @field(resolver: "PartnerResolver@assignUser")
  deletePartnerUser(input: PartnerUserInput! @spread): DefaultResponse
    @field(resolver: "PartnerResolver@unassignUser")

  # Partner Driver
  createPartnerDriver(input: PartnerDriverInput! @spread): DefaultResponse
    @field(resolver: "PartnerResolver@assignDriver")
  deletePartnerDriver(input: PartnerDriverInput! @spread): DefaultResponse
    @field(resolver: "PartnerResolver@unassignDriver")

  # Business Trip
  createBusinessTrip(input: CreateBusinessTripInput! @spread): BusinessTrip 
    @field(resolver: "BusinessTripResolver@create")
  updateBusinessTrip(input: UpdateBusinessTripInput! @spread): BusinessTrip 
    @field(resolver: "BusinessTripResolver@update")
  updateBusinessTripStatus(input: UpdateBusinessTripInput! @spread): BusinessTrip 
    @field(resolver: "BusinessTripResolver@updateStatus")
  deleteBusinessTrip(id: ID!): BusinessTrip @delete

  # Cab Request
  deleteCabRequest(id: ID!): CabRequest @delete

  # Ondemand Request 
  createOndemandRequest(input: CreateOndemandRequestInput! @spread): OndemandRequest 
    @field(resolver: "OndemandRequestResolver@create")
  updateOndemandRequest(input: UpdateOndemandRequestInput! @spread): OndemandRequest
    @field(resolver: "OndemandRequestResolver@update")
  deleteOndemandRequest(id: [ID!]!): Boolean
    @field(resolver: "OndemandRequestResolver@destroy")

  # Business Trip Station
  createBusinessTripStation(input: CreateBusinessTripStationInput! @spread): BusinessTripStation @create
  createBusinessTripStations(input: CreateBusinessTripStationsInput! @spread): [BusinessTripStation] 
    @field(resolver: "BusinessTripStationResolver@create")
  updateBusinessTripStation(input: UpdateBusinessTripStationInput! @spread): BusinessTripStation 
    @field(resolver: "BusinessTripStationResolver@update")
  updateStationsRoute(input: UpdateStationsRouteInput! @spread): Boolean 
    @field(resolver: "BusinessTripStationResolver@updateRoute")
  deleteBusinessTripStation(id: ID!): BusinessTripStation @delete
  acceptBusinessTripStation(input: AcceptBusinessTripStationInput! @spread): BusinessTripStation
    @field(resolver: "BusinessTripStationResolver@acceptStation") 

  # Business Trip Station User
  createBusinessTripStationUser(input: CreateBusinessTripStationUserInput! @spread): DefaultResponse 
    @field(resolver: "BusinessTripStationResolver@assignUser") 
  deleteBusinessTripStationUser(input: DeleteBusinessTripStationUserInput! @spread): DefaultResponse 
    @field(resolver: "BusinessTripStationResolver@unassignUser")
  createBusinessTripStationUsers(input: CreateBusinessTripStationUsersInput! @spread): DefaultResponse 
    @field(resolver: "BusinessTripStationResolver@assignUsers") 
  deleteBusinessTripStationUsers(input: DeleteBusinessTripStationUsersInput! @spread): DefaultResponse 
    @field(resolver: "BusinessTripStationResolver@unassignUsers")

  # Business Trip User
  createBusinessTripUser(input: CreateBusinessTripUserInput! @spread): DefaultResponse 
    @field(resolver: "BusinessTripResolver@inviteUser")
  confirmBusinessTripUser(input: ConfirmBusinessTripUserInput! @spread): BusinessTrip!
    @field(resolver: "BusinessTripResolver@subscribeUser")
  deleteBusinessTripUser(input: DeleteBusinessTripUserInput! @spread): DefaultResponse
    @field(resolver: "BusinessTripResolver@unsubscribeUser") 

  # Business Trip Log
  startTrip(input: StartTripInput! @spread): BusinessTrip 
    @field(resolver: "BusinessTripLogResolver@startTrip")
  updateDriverLocation(input: UpdateDriverLocationInput! @spread): Boolean 
    @field(resolver: "BusinessTripLogResolver@updateDriverLocation")
  nearYou(input: NearYouInput! @spread): String
    @field(resolver: "BusinessTripLogResolver@nearYou")
  userArrived(input: UserArrivedInput! @spread): String
    @field(resolver: "BusinessTripLogResolver@userArrived")
  endTrip(input: EndTripInput! @spread): String
    @field(resolver: "BusinessTripLogResolver@endTrip")
  changeTripUserStatus(input: ChangeTripUserStatusInput! @spread): String
    @field(resolver: "BusinessTripLogResolver@changeTripUserStatus")
  pickUsers(input: SelectUsersInput! @spread): String
    @field(resolver: "BusinessTripLogResolver@pickUsers")
  dropUsers(input: SelectUsersInput! @spread): String
    @field(resolver: "BusinessTripLogResolver@dropUsers")
  deleteBusinessTripLog(log_id: [String!]!): Boolean
    @field(resolver: "BusinessTripLogResolver@deleteBusinessTripLog")

  # Communication
  sendDirectMessage(input: SendDirectMessageInput! @spread): String
    @field(resolver: "CommunicationResolver@sendDirectMessage")
  sendChatMessage(input: SendChatMessageInput! @spread): Message
    @field(resolver: "CommunicationResolver@sendChatMessage")

} 

# Queries that require Auth
type Query @guard(with: ["admin", "partner", "user", "driver"]) {
  # User
  userLiveTrip(user_id: ID!): UserLiveTripResponse!
    @field(resolver: "BusinessTripResolver@userLiveTrip")
  userSubscriptions(user_id: ID!): [BusinessTrip]
    @field(resolver: "BusinessTripResolver@userSubscriptions")
  userTrips(user_id: ID!, partner_id: ID, day: String): [BusinessTrip]
    @field(resolver: "BusinessTripResolver@userTrips")
  userTripPartners(user_id: ID!): [Partner]
    @field(resolver: "BusinessTripResolver@userTripPartners")
  userTripsByPartner(user_id: ID!, partner_id: ID!, day: String): [BusinessTrip]
    @field(resolver: "BusinessTripResolver@userTripsByPartner")
  users(searchFor: String, searchQuery: String): [User] 
    @paginate(scopes: ["sort", "search"])
  partnerUsers(partner_id: ID!, searchFor: String, searchQuery: String, assigned: Boolean): [User] 
    @paginate(scopes: ["assignedOrNotAssigned", "search"])
  user(id: ID @eq): User @find

  # Fleet
  fleets: [Fleet] @paginate
  fleet(id: ID @eq): Fleet @find

  # Driver
  drivers(fleet_id: ID, searchFor: String, searchQuery: String): [Driver] 
    @paginate(scopes: ["filterByFleet", "search"])
  driver(id: ID @eq): Driver @find
  driverLiveTrip(driver_id: ID!): DriverLiveTripResponse!
    @field(resolver: "BusinessTripResolver@driverLiveTrip")
  driverTrips(driver_id: ID!, day: String): [BusinessTrip]
    @field(resolver: "BusinessTripResolver@driverTrips")

  # Admin
  admins: [Admin] @all
  admin(id: ID @eq): Admin @find 
  authAdmin: Admin @auth

  # Role
  roles: [Role] @all
  role(id: ID @eq): Role @find

  # Vehicles
  vehicles: [Vehicle] @paginate
  vehicle(id: ID @eq): Vehicle @find
  vehicleModelsByType(type_id: ID!): [VehicleModelsByTypeResponse!]
    @field(resolver: "VehicleResolver@vehicleModelsByType")

  # Car Make
  carMakes: [CarMake] @all
  carMake(id: ID @eq): CarMake @find

  # Car Model
  carModels: [CarModel] @all
  carModel(id: ID @eq): CarModel @find
  carMakeModels(make_id: ID @eq): [CarModel] @all

  # Car Type
  carTypes(ondemand: Boolean): [CarType] @all(scopes: ["filter"])
  carType(id: ID @eq): CarType @find

  # Promo Code
  promoCodes: [PromoCode] @all
  promoCode(id: ID @eq): PromoCode @find

  # Cab Request
  cabRequests(status: String period: String): [CabRequest]
    @paginate(scopes: ["filter"]) @softDeletes
  cabRequest(id: ID! @eq): CabRequest @find
  cabRequestStatement(period: String): RequestStatsResponse
    @field(resolver: "CabResolver@requestStatement")

  # Ondemand Request
  ondemandRequests(status: String period: String): [OndemandRequest]
    @paginate(scopes: ["filter"])
  ondemandRequestsByUser(user_id: ID! @eq): [OndemandRequest] @all
  ondemandRequest(id: ID, nav: Boolean): OndemandRequest 
    @field(resolver: "OndemandRequestResolver")
  ondemandRequestsStats(status: String period: String): RequestStatsResponse
    @field(resolver: "OndemandRequestResolver@stats")

  # Document
  documents(documentable_id: ID!, documentable_type: String!): [Document]
    @field(resolver: "DocumentResolver")

  # Driver Vehicle
  driverAssignedVehicles(driver_id: ID!): [Vehicle] 
    @field(resolver: "VehicleResolver@driverAssignedVehicles")
  driverNotAssignedVehicles(driver_id: ID!): [Vehicle] 
    @paginate(scopes: ["notAssigned"])

  # Partner
  partners: [Partner] @all
  partner(id: ID @eq): Partner @find
  authPartner: Partner @auth
  partnerLiveTrips(partner_id: ID!): [PartnerLiveTripResponse]
    @field(resolver: "BusinessTripResolver@partnerLiveTrips")
  partnerPredefinedStations(partner_id: ID! @eq trip_id: ID!): [BusinessTrip] 
    @all(scopes: ["predefinedStations"])

  # Partner Driver 
  partnerAssignedDrivers(partner_id: ID!): [Driver] 
    @field(resolver: "PartnerResolver@partnerAssignedDrivers")
  partnerNotAssignedDrivers(partner_id: ID!, searchFor: String, searchQuery: String): [Driver] 
    @paginate(scopes: ["notAssigned", "search"])

  # Business Trip
  businessTrips(partner_id: ID, driver_id: ID): [BusinessTrip] 
    @paginate(scopes: ["filter"]) @softDeletes
  businessLiveTrips: [BusinessTrip] @all(scopes: ["live"])
  trip(id: ID @eq): BusinessTrip @find

  # Business Trip Station
  businessTripStations(trip_id: ID! @eq): [BusinessTripStation] @all @softDeletes

  # Business Trip Station User
  businessTripStationAssignedUsers(station_id: ID!): [User] 
    @field(resolver: "BusinessTripResolver@stationAssignedUsers")
  businessTripStationNotAssignedUsers(partner_id: ID!, station_id: ID!): [User] 
    @field(resolver: "BusinessTripResolver@stationNotAssignedUsers")

  # Business Trip User
  businessTripUsers(input: GetBusinessTripUsersInput! @spread): [BusinessTripUserWithStationResponse] 
    @field(resolver: "BusinessTripResolver@users")
 
  # Business Trip Log
  driverLocation(driver_id: ID!): LocationCoordinatesResponse
    @field(resolver: "BusinessTripLogResolver@driverLocation")
  arrivedAndPickedUsers(trip_id: ID, station_id: ID): [User]
    @field(resolver: "BusinessTripLogResolver@arrivedAndPickedUsers")
  businessTripLogs(trip_id: ID!, user_id: ID, period: String): [BusinessTripLogsResponse]
    @paginate(builder: "App\\TripLog@index")
  businessTripLog(log_id: String!, user_id: ID): [BusinessTripLogResponse]
    @field(resolver: "BusinessTripLogResolver@show")
  businessTripSubscribers(trip_id: ID, station_id: ID, status: String!): [User]
    @field(resolver: "BusinessTripLogResolver@businessTripSubscribers")
 
  # Notifications
  unreadNotifications: [Notification]!
    @field(resolver: "NotificationResolver@unreadNotifications")

  # Communication
  chatMessages(trip_id: String!, trip_type: String!): [Message] 
    @field(resolver: "CommunicationResolver@chatMessages")
}

#import fleet.graphql 
#import driver.graphql
#import vehicle.graphql
#import carType.graphql
#import carMake.graphql
#import carModel.graphql
#import partner.graphql
#import user.graphql
#import businessTrip.graphql
#import businessTripStation.graphql
#import businessTripUser.graphql
#import role.graphql
#import admin.graphql
#import communication.graphql
#import businessTripLog.graphql
#import document.graphql
#import promoCode.graphql
#import cabRequest.graphql
#import ondemandRequest.graphql
#import notification.graphql