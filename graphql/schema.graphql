scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

# -- MUTATIONS --

type Mutation {
  # Admin Auth
  adminLogin(input: LoginInput! @spread): AdminAuthPayload! 
    @field(resolver: "AdminResolver@login")

  # User Auth
  createUser(input: CreateUserInput! @spread): UserPayload!
    @field(resolver: "UserResolver@create")
  userLogin(input: LoginInput! @spread): UserPayload! 
    @field(resolver: "UserResolver@login")
  userSocialLogin(input: SocialLoginInput! @spread): UserPayload! 
    @field(resolver: "UserResolver@socialLogin")
  forgotPassword(input: ForgotPasswordInput! @spread): DefaultResponse 
    @field(resolver: "ForgotPasswordResolver")
  updateForgottenPassword(input: NewPasswordWithCodeInput @spread): DefaultResponse 
    @field(resolver: "ResetPasswordResolver")

  # Driver Auth
  createDriver(input: CreateDriverInput! @spread): Driver 
    @field(resolver: "DriverResolver@create")
  driverLogin(input: LoginInput! @spread): DriverAuthPayload! 
    @field(resolver: "DriverResolver@login")

  # Partner Auth
  partnerLogin(input: LoginInput! @spread): PartnerAuthPayload! 
    @field(resolver: "PartnerResolver@login")
}

# Admin Guard
extend type Mutation @guard(with: ["admin"]) {
  # Driver
  deleteDriver(id: [ID!]!): Boolean
    @field(resolver: "DriverResolver@destroy")

  # Fleet
  createFleet(input: CreateFleetInput! @spread): Fleet
    @field(resolver: "FleetResolver@create")
  updateFleet(input: UpdateFleetInput! @spread): Fleet 
    @field(resolver: "FleetResolver@update") @updateFleetValidation
  deleteFleet(id: ID!): Fleet @delete

  # Admin
  createAdmin(input: CreateAdminInput! @spread): Admin
    @field(resolver: "AdminResolver@create")
  updateAdmin(input: UpdateAdminInput! @spread): Admin 
    @field(resolver: "AdminResolver@update") @updateAdminValidation
  changeAdminPassword(input: ChangePasswordInput @spread): String 
    @field(resolver: "AdminResolver@updatePassword")
  deleteAdmin(id: ID!): Admin @delete

  # Role Type
  createRole(input: CreateRoleInput! @spread): Role @create
  updateRole(input: UpdateRoleInput! @spread): Role @update @updateRoleValidation
  deleteRole(id: ID!): Role @delete

  # Statement
  createStatement(input: CreateStatementInput! @spread): Statement @create
  updateStatement(input: UpdateStatementInput! @spread): Statement @update @updateStatementValidation
  deleteStatement(id: ID!): Statement @delete

  # Vehicle
  createVehicle(input: CreateVehicleInput! @spread): Vehicle 
    @field(resolver: "VehicleResolver@create")
  updateVehicle(input: UpdateVehicleInput! @spread): Vehicle 
    @field(resolver: "VehicleResolver@update") @updateVehicleValidation
  deleteVehicle(id: ID!): Vehicle @delete

  # Car Make
  createCarMake(input: CreateCarMakeInput! @spread): CarMake @create
  updateCarMake(input: UpdateCarMakeInput! @spread): CarMake @update @updateCarMakeValidation
  deleteCarMake(id: ID!): CarMake @delete

  # Car Model
  createCarModel(input: CreateCarModelInput! @spread): CarModel 
    @field(resolver: "CarModelResolver@create")
  updateCarModel(input: UpdateCarModelInput! @spread): CarModel
    @field(resolver: "CarModelResolver@update")
  deleteCarModel(id: ID!): CarModel @delete

  # Car Type
  createCarType(input: CreateCarTypeInput! @spread): CarType
    @field(resolver: "CarTypeResolver@create")
  updateCarType(input: UpdateCarTypeInput! @spread): CarType 
    @field(resolver: "CarTypeResolver@update") @updateCarTypeValidation
  deleteCarType(id: ID!): CarType @delete

  # Promo Code
  createPromoCode(input: CreatePromoCodeInput! @spread): PromoCode @create
  updatePromoCode(input: UpdatePromoCodeInput! @spread): PromoCode @update @updatePromoCodeValidation
  deletePromoCode(id: ID!): PromoCode @delete

  # Document
  uploadDocument(input: UploadDocumentInput @spread): Document
    @field(resolver: "DocumentResolver@create")
  deleteDocument(id: ID!): String
    @field(resolver: "DocumentResolver@delete")
  updateDocument(input: UpdateDocumentInput! @spread): Document @update

  # Driver Vehicle
  createDriverVehicle(input: DriverVehicleInput! @spread): DefaultResponse! 
    @field(resolver: "DriverResolver@assignVehicle")
  deleteDriverVehicle(input: DriverVehicleInput! @spread): DefaultResponse! 
    @field(resolver: "DriverResolver@unassignVehicle")

  # Partner
  createPartner(input: CreatePartnerInput! @spread): Partner
    @field(resolver: "PartnerResolver@create")
  deletePartner(id: ID!): Partner @delete

  # Partner User
  createPartnerUser(input: PartnerUserInput! @spread): DefaultResponse
    @field(resolver: "PartnerResolver@assignUser")
  deletePartnerUser(input: PartnerUserInput! @spread): DefaultResponse
    @field(resolver: "PartnerResolver@unassignUser")

  # Partner Driver
  createPartnerDriver(input: PartnerDriverInput! @spread): DefaultResponse
    @field(resolver: "PartnerResolver@assignDriver")
  deletePartnerDriver(input: PartnerDriverInput! @spread): DefaultResponse
    @field(resolver: "PartnerResolver@unassignDriver")

  # School Business Trip
  createSchoolBusinessTrip(input: CreateSchoolBusinessTripInput! @spread): Boolean 
    @field(resolver: "SchoolBusinessTripResolver@create")
  addSchoolRequestToBusinessTrip(input: AddSchoolRequestToBusinessTripInput! @spread): Boolean 
    @field(resolver: "SchoolBusinessTripResolver@addSchoolRequest")

  # Work Business Trip
  createWorkBusinessTrip(input: CreateWorkBusinessTripInput! @spread): Boolean 
    @field(resolver: "WorkBusinessTripResolver@create")
  addWorkRequestToBusinessTrip(input: AddWorkRequestToBusinessTripInput! @spread): Boolean 
    @field(resolver: "WorkBusinessTripResolver@addWorkRequest")

  # Zone
  createZone(input: CreateZoneInput! @spread): Zone 
    @create @createZoneValidation
  updateZone(input: UpdateZoneInput! @spread): Zone 
    @update @updateZoneValidation
  deleteZone(id: ID!): Zone @delete

  # School
  createSchool(input: CreateSchoolInput! @spread): School 
    @create @createSchoolValidation
  updateSchool(input: UpdateSchoolInput! @spread): School 
    @update @updateSchoolValidation
  deleteSchool(id: ID!): School @delete

  # Workplace
  createWorkplace(input: CreateWorkplaceInput! @spread): Workplace 
    @create
  updateWorkplace(input: UpdateWorkplaceInput! @spread): Workplace 
    @update
  deleteWorkplace(id: ID!): Workplace @delete

  # School Grade
  createSchoolGrade(input: CreateSchoolGradeInput! @spread): SchoolGrade 
    @create @createSchoolGradeValidation
  updateSchoolGrade(input: UpdateSchoolGradeInput! @spread): SchoolGrade 
    @update @updateSchoolGradeValidation
  deleteSchoolGrade(id: ID!): SchoolGrade @delete

  # Price Package
  createPricePackage(input: CreatePricePackageInput! @spread): PricePackage 
    @field(resolver: "PricePackageResolver@create")
  updatePricePackage(input: UpdatePricePackageInput! @spread): PricePackage 
    @field(resolver: "PricePackageResolver@update")
  deletePricePackage(id: ID!): PricePackage @delete

  # City
  createCity(input: CreateCityInput! @spread): City @create
  updateCity(input: UpdateCityInput! @spread): City @update @updateCityValidation
  deleteCity(id: ID!): City @delete

  # Reorder
  reorder(input: UpdateOrderInput! @spread): Boolean 
    @field(resolver: "ReorderResolver")
} 

# Admin|Partner Guard
extend type Mutation @guard(with: ["admin", "partner"]) {
  # User
  createMultipleUsers(input: CreateMultipleUsersInput! @spread): Boolean 
    @field(resolver: "UserResolver@createMultipleUsers")
  deleteUser(id: [ID!]!): Boolean
    @field(resolver: "UserResolver@destroy")

  # Partner
  changePartnerPassword(input: ChangePasswordInput @spread): String 
    @field(resolver: "PartnerResolver@updatePassword")
  updatePartner(input: UpdatePartnerInput! @spread): Partner 
    @field(resolver: "PartnerResolver@update") @updatePartnerValidation

  # Business Trip
  createBusinessTrip(input: CreateBusinessTripInput! @spread): BusinessTrip 
    @field(resolver: "BusinessTripResolver@create")
  copyBusinessTrip(input: CopyBusinessTripInput! @spread): BusinessTrip 
    @field(resolver: "BusinessTripResolver@copy")
  updateBusinessTrip(input: UpdateBusinessTripInput! @spread): BusinessTrip 
    @field(resolver: "BusinessTripResolver@update")
  deleteBusinessTrip(id: ID!): BusinessTrip @delete

  # Business Trip Station
  createBusinessTripStations(input: CreateBusinessTripStationsInput! @spread): [BusinessTripStation] 
    @field(resolver: "BusinessTripStationResolver@create")
  updateBusinessTripStation(input: UpdateBusinessTripStationInput! @spread): 
    BusinessTripStation @update
  updateStationsRoute(input: UpdateStationsRouteInput! @spread): Boolean 
    @field(resolver: "BusinessTripStationResolver@updateRoute")
  deleteBusinessTripStation(id: ID!): BusinessTripStation 
    @field(resolver: "BusinessTripStationResolver@destroy") 
  acceptBusinessTripStation(input: AcceptBusinessTripStationInput! @spread): BusinessTripStation
    @field(resolver: "BusinessTripStationResolver@acceptStation") 

  # Business Trip Station User
  assignBusinessTripStationUsers(input: AssignBusinessTripStationUsersInput! @spread): Boolean 
    @field(resolver: "BusinessTripStationResolver@assignUsers")
  unassignBusinessTripStationUsers(input: UnassignBusinessTripStationUsersInput! @spread): Boolean
    @field(resolver: "BusinessTripStationResolver@unassignUsers")

  # Business Trip User
  inviteBusinessTripUser(input: InviteBusinessTripUserInput! @spread): String 
    @field(resolver: "BusinessTripResolver@inviteUser")
  subscribeBusinessTripUser(input: SubscribeBusinessTripUserInput! @spread): String 
    @field(resolver: "BusinessTripResolver@subscribeUser")

  # Business Trip Event
  deleteBusinessTripEvent(log_id: [String!]!): Boolean
    @field(resolver: "BusinessTripEventResolver@destroy")

  # Communication
  sendDirectMessage(input: SendDirectMessageInput! @spread): String
    @field(resolver: "CommunicationResolver@sendDirectMessage")

  # Seats Trip Transaction
  createSeatsTripTransaction(input: CreateSeatsTripTransactionInput! @spread): Boolean
    @field(resolver: "SeatsTripTransactionResolver@create")
  deleteSeatsTripTransaction(id: [ID!]!): Boolean
    @field(resolver: "SeatsTripTransactionResolver@destroy")
}

# Admin|User Guard
extend type Mutation @guard(with: ["admin", "user"]) {
  # User
  userPhoneVerification(input: UserPhoneVerificationInput! @spread): UserPhoneVerifyPayload!
    @field(resolver: "UserResolver@phoneVerification")
  changeUserPassword(input: ChangePasswordInput @spread): DefaultResponse 
    @field(resolver: "UserResolver@updatePassword")

  # Ondemand Request 
  createOndemandRequest(input: CreateOndemandRequestInput! @spread): OndemandRequest 
    @field(resolver: "OndemandRequestResolver@create")
  updateOndemandRequest(input: UpdateOndemandRequestInput! @spread): OndemandRequest
    @field(resolver: "OndemandRequestResolver@update")
  deleteOndemandRequest(id: [ID!]!): Boolean
    @field(resolver: "OndemandRequestResolver@destroy")

  # Business Trip Event
  changeBusinessTripPickupStatus(input: ChangeBusinessTripPickupStatusInput! @spread): String
    @field(resolver: "BusinessTripEventResolver@changeBusinessTripPickupStatus")

  # School
  createSchoolRequest(input: CreateSchoolRequestInput! @spread): SchoolRequest 
    @field(resolver: "SchoolRequestResolver@create")
  updateSchoolRequest(input: UpdateSchoolRequestInput! @spread): SchoolRequest 
    @field(resolver: "SchoolRequestResolver@update")
  deleteSchoolRequest(id: [ID!]!): String
    @field(resolver: "SchoolRequestResolver@destroy")
  changeSchoolRequestStatus(input: ChangeSchoolRequestStatusInput! @spread): String
    @field(resolver: "SchoolRequestResolver@changeStatus")

  # Workplace
  createWorkRequest(input: CreateWorkRequestInput! @spread): WorkRequest 
    @field(resolver: "WorkRequestResolver@create")
  updateWorkRequest(input: UpdateWorkRequestInput! @spread): WorkRequest 
    @field(resolver: "WorkRequestResolver@update")
  deleteWorkRequest(id: [ID!]!): String
    @field(resolver: "WorkRequestResolver@destroy")
  changeWorkRequestStatus(input: ChangeWorkRequestStatusInput! @spread): String
    @field(resolver: "WorkRequestResolver@changeStatus")
}

# Admin|Driver Guard
extend type Mutation @guard(with: ["admin", "driver"]) {
  # Driver
  updateDriver(input: UpdateDriverInput! @spread): Driver 
    @field(resolver: "DriverResolver@update") @updateDriverValidation
  changeDriverPassword(input: ChangePasswordInput @spread): DefaultResponse 
    @field(resolver: "DriverResolver@updatePassword")

  # Business Trip Event
  startTrip(input: StartTripInput! @spread): BusinessTrip 
    @field(resolver: "BusinessTripEventResolver@startTrip")
  endTrip(input: EndTripInput! @spread): String
    @field(resolver: "BusinessTripEventResolver@endTrip")
  updateBusinessTripDriverLocation(input: UpdateBusinessTripDriverLocationInput! @spread): String 
    @field(resolver: "BusinessTripEventResolver@updateDriverLocation")
  nearYou(input: NearYouInput! @spread): String
    @field(resolver: "BusinessTripEventResolver@nearYou")
  pickUsers(input: SelectUsersInput! @spread): String
    @field(resolver: "BusinessTripEventResolver@pickUsers")
  dropUsers(input: SelectUsersInput! @spread): String
    @field(resolver: "BusinessTripEventResolver@dropUsers")
}

# Admin|Partner|User Guard
extend type Mutation @guard(with: ["admin", "partner", "user"]) {
  # User
  updateUser(input: UpdateUserInput! @spread): UserPayload 
    @field(resolver: "UserResolver@update") @updateUserValidation

  # Business Trip Station
  createBusinessTripStation(input: CreateBusinessTripStationInput! @spread): 
    BusinessTripStation @create

  # Business Trip User
  confirmBusinessTripUser(input: ConfirmBusinessTripUserInput! @spread): BusinessTrip
    @field(resolver: "BusinessTripResolver@confirmUserSubscription")
  deleteBusinessTripUser(input: DeleteBusinessTripUserInput! @spread): DefaultResponse
    @field(resolver: "BusinessTripResolver@unsubscribeUser")
  verifyBusinessTripUser(input: VerifyBusinessTripUserInput! @spread): String
    @field(resolver: "BusinessTripResolver@verifyUserSubscription")

  # Business Trip User Station
  assignBusinessTripStationUser(input: AssignBusinessTripStationUserInput! @spread): 
    Boolean @field(resolver: "BusinessTripStationResolver@assignUser")

  # Business Trip Schedule
  rescheduleUserBusinessTrip(input: BusinessTripScheduleInput! @spread): Boolean
    @field(resolver: "BusinessTripScheduleResolver@reschedule")
}

# Admin|Partner|User|Driver Guard
extend type Mutation @guard(with: ["admin", "partner", "user", "driver"]) {
  # Communication
  sendBusinessTripChatMessage(input: SendBusinessTripChatMessageInput! @spread): BusinessTripChat
    @field(resolver: "CommunicationResolver@sendBusinessTripChatMessage")

  # Business Trip Attendance
  createBusinessTripAttendance(input: CreateBusinessTripAttendanceInput! @spread): Boolean
    @field(resolver: "BusinessTripAttendanceResolver@create")

  # Business Trip Event
  changeBusinessTripAttendanceStatus(input: ChangeBusinessTripAttendanceStatusInput! @spread): String
    @field(resolver: "BusinessTripEventResolver@changeBusinessTripAttendanceStatus")
}

# -- QUERIES --

# Admin Guard
type Query @guard(with: ["admin"]) {
  # Authenticated Admin
  authAdmin: Admin @auth

  # Admin
  admins: [Admin] @all
  admin(id: ID @eq): Admin @find 

  # User
  users(searchFor: String, searchQuery: String): [User] 
    @paginate(scopes: ["sort", "search"])

  # Driver
  drivers(fleet_id: ID, searchFor: String, searchQuery: String): [Driver] 
    @paginate(scopes: ["filterByFleet", "search"])

  # Fleet
  fleets: [Fleet] @all
  fleet(id: ID @eq): Fleet @find

  # Role
  roles: [Role] @all
  role(id: ID @eq): Role @find

  # Statement
  statements: [Statement] @all

  # Vehicle
  vehicles(searchFor: String, searchQuery: String): [Vehicle] 
    @paginate(scopes: ["search"])
  vehicle(id: ID @eq): Vehicle @find

  # Car Make
  carMakes: [CarMake] @all
  carMake(id: ID @eq): CarMake @find

  # Car Model
  carModels: [CarModel] @all(scopes: ["sortByOrder"])
  carModel(id: ID @eq): CarModel @find
  carMakeModels(make_id: ID @eq): [CarModel] @all

  # Car Type
  carType(id: ID @eq): CarType @find

  # Promo Code
  promoCodes: [PromoCode] @all
  promoCode(id: ID @eq): PromoCode @find

  # Ondemand Request
  ondemandRequests(status: String period: String): [OndemandRequest]
    @paginate(scopes: ["filter"])
  ondemandRequestsStats(status: String period: String): OndemandRequestStats
    @field(resolver: "OndemandRequestResolver@stats")

  # Document
  documents(documentable_id: ID!, documentable_type: String!): [Document]
    @field(resolver: "DocumentResolver")

  # Driver Vehicle
  driverNotAssignedVehicles(driver_id: ID!): [Vehicle] 
    @paginate(scopes: ["notAssigned"])

  # Partner
  partners(type: String! @eq): [Partner] @all

  # Partner Driver
  partnerNotAssignedDrivers(partner_id: ID!, searchFor: String, searchQuery: String): [Driver] 
    @paginate(scopes: ["notAssigned", "search"])

  # Zone
  zones(type: String! @eq): [Zone] @all
  zone(id: ID! @eq): Zone @find

  # To School
  allSchools(searchFor: String, searchQuery: String): [School] 
    @paginate(scopes: ["search"])
  school(id: ID! @eq): School @find
  schoolGrades(school_id: ID! @eq): [SchoolGrade] @all
  schoolGrade(id: ID! @eq): SchoolGrade @find
  schoolRequests(searchFor: String, searchQuery: String, zone_id: [ID], period: String, status: String!): [SchoolRequest] 
    @paginate(scopes: ["whereStatus", "wherePeriod", "search"])
  schoolRequestsArchive(searchFor: String, searchQuery: String, period: String): [SchoolRequest] 
    @paginate(scopes: ["whereArchived", "wherePeriod", "search"])

  # To Workplace
  allWorkplaces(searchFor: String, searchQuery: String): [Workplace] 
    @paginate(scopes: ["search"])
  workplace(id: ID! @eq): Workplace @find
  workRequests(searchFor: String, searchQuery: String, zone_id: [ID], period: String, status: String!): [WorkRequest] 
    @paginate(scopes: ["whereStatus", "wherePeriod", "search"])
  workRequestsArchive(searchFor: String, searchQuery: String, period: String): [WorkRequest] 
    @paginate(scopes: ["whereArchived", "wherePeriod", "search"])
}

# Partner Guard
extend type Query @guard(with: ["partner"]) {
  # Authenticated Partner
  authPartner: Partner @auth
}

# User Guard
extend type Query @guard(with: ["user"]) {
  # Authenticated User
  authUser: User @auth
}

# Driver Guard
extend type Query @guard(with: ["driver"]) {
  # Authenticated Driver
  authDriver: Driver @auth
}

# Admin|Partner Guard
extend type Query @guard(with: ["admin", "partner"]) {
  # User
  partnerUsers(partner_id: ID!, searchFor: String, searchQuery: String, assigned: Boolean): [User] 
    @paginate(scopes: ["whereAssignedOrNot", "search"])

  # Partner
  partner(id: ID @eq): Partner @find
  partnerAvailableLines(partner_id: ID! @eq trip_id: ID!): [BusinessTrip] 
    @all(scopes: ["availableLines"])

  # Partner Driver 
  partnerAssignedDrivers(partner_id: ID!): [Driver] 
    @field(resolver: "PartnerResolver@partnerAssignedDrivers")

  # Driver Vehicle
  driverAssignedVehicles(driver_id: ID!): [Vehicle] 
    @field(resolver: "VehicleResolver@driverAssignedVehicles")

  # Business Trip
  businessTrips(type: String, partner_id: ID, searchFor: String, searchQuery: String): [BusinessTrip] 
    @paginate(scopes: ["partner", "search"])
  partnerBusinessTrips(partner_id: ID! @eq): [BusinessTrip] @all

  # Business Trip Station User
  businessTripStationUsers(trip_id: ID!, station_id: ID!, status: String!): [User] 
    @field(resolver: "UserBusinessTripResolver@businessTripStationUsers")

  # Business Trip User
  businessTripSubscribedUsers(trip_id: ID!): [User] 
    @field(resolver: "UserBusinessTripResolver@businessTripSubscribedUsers")
  businessTripUnsubscribedUsers(trip_id: ID!, partner_id: ID, searchFor: String, searchQuery: String): 
    [User] @paginate(scopes: ["whereUnsubscribed", "search"])

  # Business Trip Event
  businessTripEvents(type: String, searchFor: String, searchQuery: String, partner_id: ID, trip_id: ID, period: String): [BusinessTripEvent]
    @paginate(scopes: ["trip", "search", "filter"])

  # Business Trip
  businessLiveTrips(type: String, partner_id: ID): [BusinessTrip] 
    @all(scopes: ["live", "partner"])

  # Seats Trip Transactions
  seatsTripTransactions(partner_id: ID, trip_id: ID, searchFor: String, searchQuery: String, period: String): [SeatsTripTransaction]
    @paginate(scopes: ["wherePartnerOrTrip", "search", "filter"])
  seatsTripTransactionsStats(period: String): SeatsTripTransactionStats
    @field(resolver: "SeatsTripTransactionResolver@stats")
}

# Admin|User Guard
extend type Query @guard(with: ["admin", "user"]) {
  # Car Type
  carTypes(ondemand: Boolean): [CarType] @all(scopes: ["whereOndemand", "sortByOrder"])

  # Vehicle Model
  vehicleModelsByType(type_id: ID!): [VehicleModelsByTypeResponse!]
    @field(resolver: "VehicleResolver@vehicleModelsByType")

  # Ondemand Request
  ondemandRequestsByUser(user_id: ID! @eq): [OndemandRequest] @all
  ondemandRequest(id: ID, nav: Boolean): OndemandRequest 
    @field(resolver: "OndemandRequestResolver")

  # School Request
  schools(zone_id: ID, city_id: ID): [School] @all(scopes: ["whereZoneOrCity"])
  schoolRequest(id: ID! @eq): SchoolRequest @find
  schoolRequestsByUser(user_id: ID! @eq): [SchoolRequest] @all

  # Workplace Request
  workplaces(zone_id: ID, city_id: ID): [Workplace] @all(scopes: ["whereZoneOrCity"])
  workRequest(id: ID! @eq): WorkRequest @find
  workRequestsByUser(user_id: ID! @eq): [WorkRequest] @all

  # Price Package
  pricePackages(city_id: ID, type: String): [PricePackage] 
    @all(scopes: ["whereCity", "whereType", "sortByOrder"])

  # City
  cities: [City] @all

  # Statement
  statement(type: String! @eq): Statement @find
}

# Admin|Partner|User Guard
extend type Query @guard(with: ["admin", "partner", "user"]) {
  # User
  userLiveBusinessTrips(user_id: ID!): [BusinessTrip]
    @field(resolver: "BusinessTripResolver@userLiveTrips")
  userSubscriptions(user_id: ID!): [BusinessTrip]
    @field(resolver: "BusinessTripResolver@userSubscriptions")
  userTrips(user_id: ID!, day: String!): [BusinessTrip]
    @field(resolver: "BusinessTripResolver@userTrips")
  user(id: ID @eq): User @find

  # Business Trip Schedule
  businessTripSchedule(trip_id: ID!, user_id: ID!): BusinessTripSchedule
    @field(resolver: "UserBusinessTripResolver@businessTripSchedule")
}

# Admin|Partner|Driver Guard
extend type Query @guard(with: ["admin", "partner", "driver"]) {
  # Business Trip Attendance
  businessTripAttendance(trip_id: ID!, date: Date): [BusinessTripAttendance]
    @field(resolver: "UserBusinessTripResolver@businessTripAttendance")

  # Driver
  driver(id: ID @eq): Driver @find
  driverLiveTrip(driver_id: ID!): DriverLiveTripResponse!
    @field(resolver: "BusinessTripResolver@driverLiveTrip")
  driverLiveBusinessTrips(driver_id: ID!): [BusinessTrip]
    @field(resolver: "BusinessTripResolver@driverLiveTrips")
  driverTrips(driver_id: ID!, day: String!): [BusinessTrip]
    @field(resolver: "BusinessTripResolver@driverTrips")
  driverBusinessTrips(driver_id: ID! @eq): [BusinessTrip] @all
}

# Admin|Partner|User|Driver Guard
extend type Query @guard(with: ["admin", "partner", "user", "driver"]) {
  # Business Trip
  trip(id: ID @eq): BusinessTrip @find

  # Business Trip Station
  businessTripStations(trip_id: ID! @eq): [BusinessTripStation] @all

  # Business Trip Event
  businessTripUserStatus(trip_id: ID!, user_id: ID!): User 
    @field(resolver: "UserBusinessTripResolver@businessTripUserStatus")
  businessTripUsersStatus(trip_id: ID, station_id: ID): [User]
    @field(resolver: "UserBusinessTripResolver@businessTripUsersStatus")
  businessTripSubscribers(trip_id: ID, station_id: ID, status: String!): [User]
    @field(resolver: "UserBusinessTripResolver@businessTripSubscribers")

  # Communication
  businessTripChatMessages(log_id: String!, user_id: ID, is_direct: Boolean): [BusinessTripChat] 
    @field(resolver: "CommunicationResolver@businessTripChatMessages")
}

#import fleet.graphql 
#import driver.graphql
#import vehicle.graphql
#import carType.graphql
#import carMake.graphql
#import carModel.graphql
#import partner.graphql
#import user.graphql
#import businessTripSchedule.graphql
#import businessTrip.graphql
#import schoolBusinessTrip.graphql
#import businessTripStation.graphql
#import businessTripUser.graphql
#import role.graphql
#import admin.graphql
#import communication.graphql
#import businessTripEvent.graphql
#import document.graphql
#import promoCode.graphql
#import ondemandRequest.graphql
#import school.graphql
#import city.graphql
#import pricePackage.graphql
#import businessTripAttendance.graphql
#import statement.graphql
#import utilities.graphql
#import seatsTripTransaction.graphql
#import zone.graphql
#import workplace.graphql
#import workBusinessTrip.graphql