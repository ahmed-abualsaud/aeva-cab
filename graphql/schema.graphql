type Mutation {
  qruzMemberLogin(input: QruzMemberLoginInput! @spread): QruzMemberAuthPayload! 
    @field(resolver: "QruzMemberLogin@resolve")

  partnerLogin(input: PartnerLoginInput! @spread): PartnerAuthPayload! 
    @field(resolver: "PartnerLogin@resolve")

  userLogin(input: UserLoginInput! @spread): UserAuthPayload! 
    @field(resolver: "UserLogin@resolve")

  userSocialLogin(input: UserSocialLoginInput! @spread): UserAuthPayload! 
    @field(resolver: "UserSocialLogin@resolve")

  userPhoneVerification(input: UserPhoneVerificationInput! @spread): String!
    @field(resolver: "UserPhoneVerification")

  driverLogin(input: DriverLoginInput! @spread): DriverAuthPayload! 
    @field(resolver: "DriverLogin@resolve")
}

extend type Mutation {
  createFleet(input: CreateFleetInput! @spread): Fleet @create
  updateFleet(input: UpdateFleetInput! @spread): Fleet @update @updateFleetValidation
  deleteFleet(id: ID!): Fleet @delete

  createDriver(input: CreateDriverInput! @spread): Driver @create
  updateDriver(input: UpdateDriverInput! @spread): Driver @update @updateDriverValidation
  deleteDriver(id: ID!): Driver @delete

  createCarType(input: CreateCarTypeInput! @spread): CarType @create
  updateCarType(input: UpdateCarTypeInput! @spread): CarType @update @updateCarTypeValidation
  deleteCarType(id: ID!): CarType @delete

  createCarMake(input: CreateCarMakeInput! @spread): CarMake @create
  updateCarMake(input: UpdateCarMakeInput! @spread): CarMake @update @updateCarMakeValidation
  deleteCarMake(id: ID!): CarMake @delete

  createCarModel(input: CreateCarModelInput! @spread): CarModel @create
  updateCarModel(input: UpdateCarModelInput! @spread): CarModel @update
  deleteCarModel(id: ID!): CarModel @delete

  createVehicle(input: CreateVehicleInput! @spread): Vehicle @create
  updateVehicle(input: UpdateVehicleInput! @spread): Vehicle @update @updateVehicleValidation
  deleteVehicle(id: ID!): Vehicle @delete

  createDriverVehicle(input: DriverVehicleInput! @spread): String! 
    @field(resolver: "CreateDriverVehicle")
  deleteDriverVehicle(input: DriverVehicleInput! @spread): String! 
    @field(resolver: "DeleteDriverVehicle")

  createPartner(input: CreatePartnerInput! @spread): Partner @create
  updatePartner(input: UpdatePartnerInput! @spread): Partner @update @updatePartnerValidation
  deletePartner(id: ID!): Partner @delete

  createUser(input: CreateUserInput! @spread): User @create
  updateUser(input: UpdateUserInput! @spread): User @update @updateUserValidation
  deleteUser(id: ID!): User @delete

  createPartnerDriver(input: PartnerDriverInput! @spread): String!
    @field(resolver: "CreatePartnerDriver")
  deletePartnerDriver(input: PartnerDriverInput! @spread): String! 
    @field(resolver: "DeletePartnerDriver") 

  createPartnerTrip(input: CreatePartnerTripInput! @spread): PartnerTrip 
    @field(resolver: "CreatePartnerTrip")
  updatePartnerTrip(input: UpdatePartnerTripInput! @spread): PartnerTrip @update
  deletePartnerTrip(id: ID!): PartnerTrip @delete

  createPartnerTripStation(input: CreatePartnerTripStationInput! @spread): PartnerTripStation @create
  updatePartnerTripStation(input: UpdatePartnerTripStationInput! @spread): PartnerTripStation @update
  deletePartnerTripStation(id: ID!): PartnerTripStation @delete
  acceptPartnerTripStation(input: AcceptPartnerTripStationInput! @spread): String! 
    @field(resolver: "AcceptPartnerTripStation") 

  createPartnerTripStationUser(input: CreatePartnerTripStationUserInput! @spread): PartnerTripStationUser @create

  createPartnerTripUser(input: CreatePartnerTripUserInput! @spread): String! 
    @field(resolver: "CreatePartnerTripUsers")
  deletePartnerTripUser(input: DeletePartnerTripUserInput! @spread): String! 
    @field(resolver: "DeletePartnerTripUser")
  confirmPartnerTripUser(input: ConfirmPartnerTripUserInput! @spread): PartnerTrip
    @field(resolver: "ConfirmPartnerTripUser")

  createRoleType(input: CreateRoleTypeInput! @spread): RoleType @create
  updateRoleType(input: UpdateRoleTypeInput! @spread): RoleType @update @updateRoleTypeValidation
  deleteRoleType(id: ID!): RoleType @delete

  createRole(input: CreateRoleInput! @spread): Role @create
  updateRole(input: UpdateRoleInput! @spread): Role @update @updateRoleValidation
  deleteRole(id: ID!): Role @delete
}

type Query {
  fleets: [Fleet!]! @all
  fleet(id: ID @eq): Fleet @find

  drivers: [Driver!]! @all
  driver(id: ID @eq): Driver @find
  fleetDrivers(fleet_id: ID @eq): [Driver] @all

  vehicles: [Vehicle!]! @all
  driverVehicles(driver_id: ID!, assigned: Boolean!): [Vehicle] @field(resolver: "DriverVehicles")

  carTypes: [CarType!]! @all
  carType(id: ID @eq): CarType @find
  
  carMakes: [CarMake!]! @all
  carMake(id: ID @eq): CarMake @find

  carModels: [CarModel!]! @all
  carModel(id: ID @eq): CarModel @find
  carMakeModels(make_id: ID @eq): [CarModel] @all

  partners: [Partner!]! @all
  partner(id: ID @eq): Partner @find

  trips: [PartnerTrip!]! @all
  trip(id: ID @eq): PartnerTrip @find

  roleTypes: [RoleType!]! @all
  roleType(id: ID @eq): RoleType @find

  roles: [Role!]! @all
  role(id: ID @eq): Role @find 

  partnerTrips(partner_id: ID! @eq): [PartnerTrip] @all
  partnerUsers(partner_id: ID! @eq): [User] @all
  partnerDrivers(partner_id: ID!, assigned: Boolean!): [Driver] @field(resolver: "PartnerDrivers")
  partnerTripUsers(input: GetPartnerTripUsersInput! @spread): [User] @field(resolver: "PartnerTripUsers")
  partnerTripStations(input: GetPartnerTripStationsInput! @spread): [PartnerTripStation]
    @field(resolver: "PartnerTripStations") 
  partnerTripStationUsers(station_id: ID!): [User] 
    @field(resolver: "PartnerTripStationUsers")
}

#import fleet.graphql 
#import driver.graphql
#import vehicle.graphql
#import driverVehicle.graphql
#import carType.graphql
#import carMake.graphql
#import carModel.graphql
#import partner.graphql
#import user.graphql
#import partnerDriver.graphql
#import partnerTrip.graphql
#import partnerTripStation.graphql
#import partnerTripStationUser.graphql
#import partnerTripUser.graphql
#import roleType.graphql
#import role.graphql
