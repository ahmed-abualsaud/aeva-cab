input CreateDriverInput @validator {
  first_name: String! @rules(apply: ["required"])
  last_name: String! @rules(apply: ["required"])
  fleet_id: ID
  email: String
  phone: String 
  password: String
  license_expires_on: String
  avatar: Upload
  city: String
  vehicle: String
  status: Boolean
  partner_id: ID
  car_type_id: ID
  code: String
  wallet: Float
}

input UpdateDriverInput @validator {
  id: ID
  first_name: String
  last_name: String
  full_name: String
  email: String
  phone: String
  fleet_id: ID
  license_expires_on: String
  avatar: Upload
  status: Boolean
  device_id: String
  partner_id: ID
  code: String
  latitude: Float
  longitude: Float
  wallet: Float
  register_complete: Boolean
  car_type_id: ID 
  city: String
  vehicle: String
  phone_verified_at: String
}

input DriverVehicleInput {
  driver_id: ID! @rules(apply: ["required"])
  vehicle_id: [ID!]! @rules(apply: ["required"])
}

type DriverAuthPayload {
  access_token: String
  driver: Driver
}

type Driver {
  id: ID
  first_name: String
  last_name: String
  full_name: String
  email: String
  phone: String
  license_expires_on: String
  avatar: String
  latitude: Float
  longitude: Float
  rating: Float
  status: Boolean
  cab_status: String
  city: String
  vehicle: String
  partner_id: ID
  code: String
  created_at: String
  updated_at: String
  partners: [Partner] @hasMany
  trips: [BusinessTrip] @hasMany
  vehicles: [Vehicle] @hasMany
  documents: [Document] @morphMany
  wallet: Float
  register_complete: Boolean
  phone_verified_at: String
  car_type: CarType @BelongsTo
  token: String
  verification_code: String
}