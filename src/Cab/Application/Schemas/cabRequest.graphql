input CabRequestInput {
  id: ID
  user_id: ID
  driver_id: ID
  vehicle_id: ID
  car_type: String
  cancelled_by: String @rules(apply: ["in:user,driver"])
  cancel_reason: String
  schedule_time: String
  distance: Float
  duration: Float
  total_eta: Float
  route_key: String
  s_address: String
  payment_method: String
  s_lat: Float
  s_lng: Float
  d_address: String
  d_lat: Float
  d_lng: Float
  notes: String
  locations: [Location]
}

input Location {
  latitude: Float
  longitude: Float
  id: Int
}

type CabRequest {
  id: ID
  user: CabUser @BelongsTo(relation: "user")
  driver: Driver @BelongsTo
  vehicle: Vehicle @BelongsTo
  rating: CabRating @HasOne
  promo_code: PromoCode @belongsTo(relation: "promoCode")
  transactions: [CabRequestTransaction] @HasMany
  user_id: ID
  user_name: String
  user_phone: String
  result: DriverVehicle
  status: String
  schedule_time: String
  next_free_time: String
  paid: Boolean
  costs: Float
  payment_method: String
  history: CabRequestHistory
  map_url: String
  s_address: String
  s_lat: Float
  s_lng: Float
  d_address: String
  d_lat: Float
  d_lng: Float
  created_at: String
  costs_after_discount: Float
  discount: Float
  notes: String
  missed_drivers: [Driver]
  remaining: Float
  amount_paid: Float
  totally_paid: Boolean
}

type CabRequestHistory {
  scheduled: HistoryObj
  searching: HistoryObj
  sending: HistoryObj
  missing: HistoryObj
  accepted: HistoryObj
  arrived: HistoryObj
  started: HistoryObj
  ended: HistoryObj
  cancelled_by_user: HistoryObj
  cancelled_by_driver: HistoryObj
  redirect: HistoryObj
  summary: Summary
}

type HistoryObj {
  at: String
  by: String
  reason: String
  result: DriverVehicle
  chosen_car_type: String
  payment_method: String
  user: User
  driver: Driver
  vehicle: VehicleObj
  waiting_time: Float
  cancelled_drivers: [ID]
  missed: [Missed]
  status: Boolean
  s_address: String
  s_lat: Float
  s_lng: Float
  d_address: String
  d_lat: Float
  d_lng: Float
  previous_route_costs: Float
  next_route_costs: Float
}

type Summary {
  distance: Float
  duration: Float
  total_eta: Float
}

type DriverVehicle {
  drivers: [DriverObj]
  vehicles: [VehicleObj]
}

type DriverObj {
  driver_id: ID
  name: String
  phone: String
  avatar: String
  distance: Float
  latitude: Float
  longitude: Float
}

type VehicleObj {
  driver_id: ID
  vehicle_id: ID
  car_model: String
  car_make: String
  car_type: String
  car_type_id: ID
  color: String
  license: String
  photo: String
  price: Float
}

type Missed {
  at: String
  by: [ID]
}
