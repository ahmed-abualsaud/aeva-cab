# --------------------------------------- Mutations ---------------------------------------

# Admin Guard
extend type Mutation @guard(with: ["admin"]) {
  # Cab Request
  deleteCabRequestTransaction(id: [ID!]!): Boolean
    @field(resolver: "CabRequestTransactionResolver@destroy")
  addCabRequestNotes(id: ID @eq, notes: String): CabRequest @update
}

# User Guard
extend type Mutation @guard(with: ["admin", "user"]) {
  # Cab Rating
  updateCabRating(input: UpdateCabRatingInput! @spread): [CabRating]
    @field(resolver: "CabRatingResolver@update")

  # Cab Request
  redirectCabRequest(input: CabRequestInput! @spread): CabRequest
    @field(resolver: "CabRequestResolver@redirect")
}

# Driver Guard
extend type Mutation @guard(with: ["admin", "driver", "user"]) {
  # Cab Request
  createCabRequestTransaction(input: CabRequestTransactionInput! @spread): CabRequestTransaction
    @field(resolver: "CabRequestTransactionResolver@create")
  updateDriverCabStatus(driver_id: ID!, cab_status: String!): Boolean
    @field(resolver: "CabRequestResolver@updateDriverCabStatus")
}

# Admin,User Guard
extend type Mutation @guard(with: ["admin", "user"]) {
  # Cab Request
  scheduleCabRequest(input: CabRequestInput! @spread): CabRequest
    @field(resolver: "CabRequestResolver@schedule")
  searchCabRequest(input: CabRequestInput! @spread): CabRequest
    @field(resolver: "CabRequestResolver@search")
  pickCabRequestCarType(input: CabRequestInput! @spread): CabRequest
    @field(resolver: "CabRequestResolver@pickCarType")
  sendCabRequest(input: CabRequestInput! @spread): CabRequest
    @field(resolver: "CabRequestResolver@send")
}

# Admin,Driver Guard
extend type Mutation @guard(with: ["admin", "driver"]) {
  # Cab Request
  acceptCabRequest(input: CabRequestInput! @spread): CabRequest
    @field(resolver: "CabRequestResolver@accept")
  arrivedCabRequest(input: CabRequestInput! @spread): CabRequest
    @field(resolver: "CabRequestResolver@arrived")
  startCabRequest(input: CabRequestInput! @spread): CabRequest
    @field(resolver: "CabRequestResolver@start")
  endCabRequest(input: CabRequestInput! @spread): CabRequest
    @field(resolver: "CabRequestResolver@end")
}

# Admin,Partner,Manager,User,Driver Guard
extend type Mutation @guard(with: ["admin", "partner", "manager", "user", "driver"]) {
  # Cab Request
  cancelCabRequest(input: CabRequestInput! @spread): CabRequest
    @field(resolver: "CabRequestResolver@cancel")
  resetCabRequests(issuer_id: ID!, issuer_type: String!): Boolean
    @field(resolver: "CabRequestResolver@reset")
}

# --------------------------------------- QUERIES ---------------------------------------

# Admin Guard
extend type Query @guard(with: ["admin"]) {
  # Cab Request
  cabRequests(driver_id: ID, user_id: ID, status: String, period: String, searchFor: String, searchQuery: String): [CabRequest]
    @paginate(scopes: ["filter", "search", "getLatest"])
  cabRequestTransactions(period: String, searchFor: String, searchQuery: String, driver_id: ID): [CabRequestTransaction]
    @paginate(scopes: ["filter", "search", "getLatest", "driver","cashoutExcluded"])
  cabRequestTransactionsStats(period: String): TransactionStats
    @field(resolver: "CabRequestTransactionResolver@stats")
  missedCabRequests(user_id: ID): [CabRequest]
    @field(resolver: "CabRequestResolver@missedRequests")
  completedCabRequestsStats(period: String, x_as_driver_name: Boolean): [chartObject]
    @field(resolver: "CabRequestResolver@stats")
}

# User Guard
extend type Query @guard(with: ["user"]) {
  # Cab Request
  userCabRequests(user_id: ID!, status: String, first: Int, page:Int): [[CabRequest]]
    @field(resolver: "CabRequestResolver@history")
  userLiveCabRequest(user_id: ID!): CabRequest @first(scopes: ["userLive", "getLatest"])
  userScheduledCabRequests(user_id: ID! @eq): [CabRequest]
    @all(scopes: ["whereScheduled", "getLatest"])
}

# Driver Guard
extend type Query @guard(with: ["driver"]) {
  # Cab Request
  driverCabRequests(driver_id: ID!, status: String, first: Int, page:Int): [[CabRequest]]
    @field(resolver: "CabRequestResolver@history")
  driverLiveCabRequest(driver_id: ID! @eq): CabRequest @first(scopes: ["driverLive", "getLatest"])
}

# Admin,Partner,Manager,User Guard
extend type Query @guard(with: ["admin", "partner", "user", "manager"]) {
  # Cab Rating
  cabRating(request_id: ID! @eq): CabRating @find
  unratedCabRequests(user_id: ID, driver_id: ID): [CabRequest]
    @all(scopes: ["unrated", "getLatest"], model: "CabRating")
  nearestDrivers(lat: Float!, lng: Float): [Driver] @all(scopes: ["nearby"])
}

# Admin,User,Driver Guard
extend type Query @guard(with: ["admin", "user", "driver"]) {
  # Cab Request
  cabRequest(id: ID! @eq): CabRequest @findOrFail
  pendingCabRequests(issuer_id: ID!, issuer_type: String!): [CabRequest]
    @all(scopes: ["pending", "getLatest"])
}

#import cabUser.graphql
#import cabRating.graphql
#import cabRequest.graphql
#import cabRequestTransaction.graphql
