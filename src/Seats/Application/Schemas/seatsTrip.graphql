input CreateSeatsTripInput {
  name: String! @rules(apply: ["required"])
  name_ar: String! @rules(apply: ["required"])
  line_id: ID! @rules(apply: ["required"])
  partner_id: ID! @rules(apply: ["required"])
  driver_id: ID
  vehicle_id: ID
  start_date: String! @rules(apply: ["required"])
  end_date: String! @rules(apply: ["required"])
  days: TripDaysInput! @rules(apply: ["required"])
  bookable: Boolean! @rules(apply: ["required"])
  ac: Boolean! @rules(apply: ["required"])
  base_price: Float! @rules(apply: ["required"])
  minimum_distance: Int
  distance_price: Float
}

input UpdateSeatsTripInput {
  id: ID! @rules(apply: ["required"])
  name: String
  name_ar: String
  driver_id: ID
  vehicle_id: ID
  start_date: String
  end_date: String
  days: TripDaysInput
  bookable: Boolean
  ac: Boolean
  base_price: Float
  distance_price: Float
  minimum_distance: Int
}

input CopySeatsTripInput {
  id: ID! @rules(apply: ["required"])
  name: String! @rules(apply: ["required"])
  name_ar: String! @rules(apply: ["required"])
}

type SeatsTrip {
  id: ID
  name: String
  name_ar: String
  log_id: String
  start_date: String
  end_date: String
  starts_at: String
  ready_at: String
  days: TripDays
  bookable: Boolean
  ac: Boolean
  base_price: Float
  distance_price: Float
  minimum_distance: Int
  partner: Partner @belongsTo
  driver: Driver @belongsTo
  vehicle: Vehicle @belongsTo
  line: SeatsLine @belongsTo
  stations: [SeatsLineStation] @hasMany
}